# STYLE METHODS
---------------

* CSS & jQuery
--------------
At this point, you likely know that jQuery can link user events to dynamic effects on a web page. One of the most powerful toolsets in jQuery allows you to edit CSS property values. With 
these tools, you can change multiple visual aspects of an element at once.

In this lesson, youâ€™ll increase the breadth of effects you can produce on your web page by editing CSS property values and adding classes to elements.

You will also learn how to change CSS properties over time to create animations.

main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
  })
  
}); 

index.html
----------
<!DOCTYPE html>
<html>

<head>
  <title>Sole Shoes</title>
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
  <link href='https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700' rel='stylesheet'>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <!-- Navigation -->
  <nav>
    <div class='container'>
      <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/sole-logo.svg'></object>
      <div>
        <span class='menu-button'>Menu</span>
        <span class='login-button'>Login</span>
      </div>
    </div>
  </nav>

  <!-- Nav Menu -->
  <div class='nav-menu hide'>
    <div class='container'>
      <ul>
        <li>Shoes</li>
        <li>Women's Shoes</li>
        <li>Men's Shoes</li>
        <li>Shoe Accessories</li>
        <li>Wholesale</li>
      </ul>
      <ul>
        <li>Contact</li>
        <li>Twitter</li>
        <li>Facebook</li>
        <li>Instagram</li>
        <li>Email</li>
      </ul>
    </div>
  </div>

  <!-- Login Form -->
  <div class='login-form'>
    <div class='container'>
      <form>
        <h4>Username</h4>
        <input class='username' />
        <h4>Password</h4>
        <input type='password' />
        <input class='sign-in-button' type='submit' value='Sign In' />
      </form>
    </div>
  </div>

  <!-- Product Cards -->
  <div class='container'>
    <div class='product-card'>
      <div class='product-photo sole-air-ii'></div>
      <div class='product-details'>
        <h4>Sole Air II</h4>
        <div>
          <p>$35</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>The ultimate in style and comfort, the Sole Air II's are great for walking and casual wearing.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>8</li>
            <li>9</li>
            <li>10</li>
            <li>11</li>
            <li>12</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>
    </div>
  </div>

  <div class='container'>
    <div class='product-card'>
      <div class='product-photo tidal-x'></div>
      <div class='product-details'>
        <h4>Tidal X</h4>
        <div>
          <p>$40</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>The Tidal X's signature rubber midsole make this the perfect running shoe. With a soft mesh upper, and synthetic polymer outsole, these shoes really fly.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>6</li>
            <li>7</li>
            <li>10</li>
            <li>12</li>
            <li>13</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>

    </div>
  </div>

  <div class='container'>
    <div class='product-card'>
      <div class='product-photo dark-sole-original'></div>
      <div class='product-details'>
        <h4>Dark Sole Original</h4>
        <div>
          <p>$60</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>Light up the night with the Dark Sole Original. Lights around the midsole activate when stomped.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>9</li>
            <li>10</li>
            <li>10.5</li>
            <li>11</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>
    </div>
  </div>

  <!-- Shopping cart -->
  <div class='shopping-cart'>
    <div class='container'>
      <div class='cart'>
        <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/shopping-cart.svg'></object>
        <h3 class='items-qty'>1</h3>
      </div>
      <h3>Checkout</h3>
    </div>
  </div>

  <footer>
    <div class='container'>
      <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/sole-logo.svg'></object>
      <div>Contact Us</div>
    </div>
  </footer>

   <script
    src="https://code.jquery.com/jquery-3.2.1.min.js"
    integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
    crossorigin="anonymous"></script> 

  <script src='js/main.js'></script> 
</body>

</html>

styles.css
----------
* {
  margin: 0;
  padding: 0;
  transition: 0.1s; }

body {
  font-family: 'Roboto Condensed', Helvetica, sans-serif;
  text-align: left;
  font-size: 18px;
  color: #303030; }

.container {
  max-width: 450px;
  margin: 0 auto; }

h3 {
  color: #C3FF00;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.1em; }

h4 {
  text-transform: uppercase; }

.disabled h3 {
  color: #535353;
  cursor: not-allowed; }

.button-active {
  color: #C3FF00;
  background-color: #535353; }

nav {
  background-color: #303030;
  color: #EFEFEF; }
  nav .container {
    display: flex;
    justify-content: space-between;
    align-items: center; }
    nav .container object {
      width: 4.5em;
      padding: 1.2em 0.5em; }
    nav .container .login-button,
    nav .container .menu-button {
      text-transform: uppercase;
      letter-spacing: 0.1em;
      padding: 1em 1.25em;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      cursor: pointer; }

.nav-menu {
  background-color: #535353;
  color: #EFEFEF;
  display: flex;
  justify-content: center; }
  .nav-menu .container {
    padding: 1.5em;
    display: flex; }
    .nav-menu .container ul {
      list-style: none; }
      .nav-menu .container ul li {
        padding: 0.25em 2em; }
        .nav-menu .container ul li:first-child {
          text-transform: uppercase;
          color: #C3FF00;
          letter-spacing: 0.05em; }

.hide {
  display: none; }

.login-form {
  background-color: #535353;
  padding: 1em 0 0;
  color: #EFEFEF;
  display: none; }
  .login-form .container {
    padding: 0 0.5em; }
  .login-form h4 {
    font-weight: 400; }
  .login-form input {
    width: calc(100% - 1em);
    border: none;
    height: 2em;
    margin: 0.5em 0;
    font-size: 1em;
    padding: 0 0.5em; }
  .login-form .sign-in-button {
    background-color: #303030;
    color: #C3FF00;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-align: center;
    width: 100%;
    height: 2.5em;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: pointer; }

.product-card {
  margin: 1em 0; }
  .product-card .dark-sole-original,
  .product-card .sole-air-ii,
  .product-card .tidal-x {
    background-size: 28em 15em;
    background-position: center;
    height: 14em;
    transition: 0.2s; }
  .product-card .sole-air-ii {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/sole-air-ii.png"); }
  .product-card .tidal-x {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/tidal-x.png"); }
  .product-card .dark-sole-original {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/dark-sole-original.png"); }
  .product-card .photo-active {
    background-size: 30.8em 16.5em;
    transition: 0.2s; }
  .product-card .product-details {
    margin-top: -5px;
    background-color: #EFEFEF;
    display: flex;
    justify-content: space-between; }
    .product-card .product-details h4,
    .product-card .product-details p {
      padding: 0.7em 1.25em; }
    .product-card .product-details div {
      display: flex; }
    .product-card .product-details .more-details-button {
      background-color: #535353;
      padding: 0.75em 1.25em;
      cursor: pointer;
      width: 1em;
      transition: 0.1s; }
      .product-card .product-details .more-details-button img {
        position: relative;
        left: 0.1em; }
      .product-card .product-details .more-details-button .rotate {
        transition: 0.1s;
        transform: rotate(90deg); }
  .product-card .shoe-details {
    display: none;
    background-color: #535353;
    color: #EFEFEF; }
    .product-card .shoe-details .active {
      background-color: #C3FF00;
      color: #303030; }
  .product-card .size-chart,
  .product-card p {
    padding: 1em 1.25em; }
    .product-card .size-chart ul,
    .product-card p ul {
      list-style: none;
      display: flex;
      justify-content: space-around;
      margin-top: 1em; }
      .product-card .size-chart ul li,
      .product-card p ul li {
        padding: 0.5em;
        background-color: #303030;
        width: 100%;
        text-align: center;
        margin-right: 2px; }
  .product-card .buy-now-button {
    background-color: #303030;
    text-align: center;
    padding: 0.75em;
    cursor: pointer; }

.shopping-cart {
  background-color: #171717;
  position: fixed;
  bottom: 0;
  z-index: 99;
  width: 100%;
  box-shadow: 2px 0 4px 0 rgba(0, 0, 0, 0.5);
  display: none;
  height: 3.5em; }
  .shopping-cart .container {
    display: flex;
    justify-content: space-between;
    padding: 1em; }
    .shopping-cart .container .cart {
      display: flex; }
      .shopping-cart .container .cart object {
        margin-right: 0.75em; }

footer {
  color: #EFEFEF;
  background-color: #303030;
  margin-top: 2em;
  padding: 2em 0.5em; }
  footer .container {
    display: flex;
    justify-content: space-between; }
    footer .container object {
      width: 4.5em; }

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .css()
--------
To modify CSS properties of an element, jQuery provides a method called .css(). This method accepts an argument for a CSS property name, and a corresponding CSS value.

Itâ€™s syntax looks like:

$('.example-class').css('color', '#FFFFFF');

Letâ€™s break the example above into two pieces:

	. We call the .css() method on .example-class. The first argument is the CSS property we want to change. In this case, thatâ€™s 'color'.

	. The second argument specifies the new value for the given property in the first argument. In this case, the .css() method changes the color of .example-class elements to 
	'#FFFFFF'.

Notice, both of the inputs to the .css() method are strings.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.js there is a mouse enter event listener on the .menu-button element. Inside this callback function, use the .css() method to set the .menu-button elementâ€™s color value to 
#C3FF00.


Hint
In place of the ellipses below (...), call .css(), target the 'color', and change the value to '#C3FF00'

$('.menu-button').on('mouseenter', () => {
    $('.menu-button')...
  })

Checkpoint 2 Passed
2.
In main.js there is a mouse leave event listener on the .nav-menu element. Inside this callback function, use the .css() method to change the .menu-button color value to #EFEFEF.


Hint
In place of the ellipses below (...), call .css(), target the 'color', and change the value to '#EFEFEF'

$('.nav-menu').on('mouseleave', () => {
    $('.menu-button')...
  })

main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
    $('.menu-button').css("color", "#C3FF00")
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
    $('.menu-button').css("color", "#EFEFEF")
  })
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* CSS II
--------
In addition to changing one property at a time, the .css() method can accept many CSS property/value pairs at once. You must pass the .css() method a JavaScript object with a list of 
key/value pairs like this:

{
  color: '#FFFFFF',
  backgroundColor: '#000000',
  fontSize: '20px'
}

There are a few important differences between the key/value pairs in the object above and the arguments from last exercise. Letâ€™s consider these differences below:

	. The object is wrapped by an opening and closing curly brace: {}.

	. Inside the object, there are three key/value pairs. The keys in the example object are color, backgroundColor, and fontSize.

	. The values come after the colon : of each key. For instance, fontSize is a key, and its value is '20px'.

	. When referencing CSS properties in an object, the property names are camelCased â€” they are modified to have no quotes or spaces, and to start each new word with a capital 
	letter. Therefore, background-color becomes backgroundColor, and 'font-size' becomes fontSize.

To set multiple properties at once, you can pass the whole object into the .css() method as a single element.

$('.example-class').css({
  color: '#FFFFFF',
  backgroundColor: '#000000',
  fontSize: '20px'
})

In the example above, we use the .css() method to change the color, background color, and font size values of the .example-class element.

* Instructions
--------------
Checkpoint 1 Passed
1.
Modify the .css() methods you wrote in the last exercise to accept one object.

On mouse enter, the object should change the 'color' to '#C3FF00', and should change the backgroundColor to '#535353'.

On mouse leave, the object should change the 'color' to '#EFEFEF', and should change the backgroundColor to '#303030'.


Hint
$('.example-class').css({
    color: '#FFFFFF',
    backgroundColor: '#000000'
});

main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
    $('.menu-button').css({
      color: "#C3FF00",
      backgroundColor: "#535353"
    })
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
    $('.menu-button').css({
      color: "#EFEFEF",
      backgroundColor: "#303030"
    })
  })
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .animate()
------------
The jQuery .animate() method enhances the visual possibilities by making CSS value changes over a period of time.

The first argument passed to .animate() is a JavaScript object of CSS property/value pairs that represent an elementâ€™s end state. This is identical to the .css() method. For example, the 
following object could be passed to the .animate() method to change an elementâ€™s height, width, and border thickness

{
  height: '100px',
  width : '100px',
  borderWidth : '10px'
}

Note that the names of CSS properties in the JavaScript object donâ€™t have spaces or dashes and are camelCased.

The second parameter of the .animate() method determines how long the animation takes to complete. It is optional; if you do not provide an argument, the default value is 400 
milliseconds. You can use a number (in milliseconds) or the strings 'fast' or 'slow'. Below is an example of the .animate() method:

$('.example-class').animate({
  height: '100px',
  width: '100px',
  borderWidth: '10px'
}, 500);

In the example above, the height, width, and border width will change to 100px, 100px, and 10px respectively over a 500 millisecond period.

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside of the menu buttonâ€™s mouse enter callback function, change the fontSize of the .menu-button element to 24px over the course of 200 milliseconds.

Checkpoint 2 Passed
2.
Inside of the navigation menuâ€™s mouse leave callback function, change the fontSize of the .menu-button element to 18px over the course of 200 milliseconds.

main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
    $('.menu-button').css({
      color: "#C3FF00",
      backgroundColor: "#535353"
    }).animate({
      fontSize: '24px'
    }, 200)
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
    $('.menu-button').css({
      color: "#EFEFEF",
      backgroundColor: "#303030"
    }).animate({
      fontSize: '18px'
    }, 200)
  })
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .addClass()
-------------
A JavaScript file can quickly get overloaded with styles if you regularly use the css method to modify element styles. Itâ€™s a best practice to group all of the style code in a CSS file, 
and use jQuery to add and remove the classes from elements â€” this approach aligns to a design principle called separation of concerns.

Separation of concerns is a design principle stating that code should be separated based on its purpose in a program. In web development, that generally means the structure of a page is 
defined in an HTML document, styles are stored in a CSS file, and code that defines dynamic behavior is stored in a JavaScript file.

To keep CSS properties in a CSS file, jQuery can add a CSS class to an element with a method named addClass. Itâ€™s syntax looks like this:

$('.example-class').addClass('active');

In the example above:

	. addClass() is called on the jquery .example-class selector.
	. addClass() adds the 'active' class to all .example-class elements.
	. Notice that the argument passed to addClass does not have a period preceding it. This is because it expects a class, and therefore only needs the name of the class.

* Instructions
--------------
Checkpoint 1 Passed
1.
Instead of changing the text color and background color with the .css() method, replace the code in the menu button mouse enter handler with the .addClass() method.

If you navigate to css/styles.css, thereâ€™s a class named .button-active, which defines the text color and background color of an element. Use the .addClass() method to add button-active to the .menu-button element when itâ€™s moused over.


Hint
$('.example-class').on('click', function() {
  $('.example-class').addClass('button-active');
});


main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
    $('.menu-button').addClass('button-active').animate({
      fontSize: '24px'
    }, 200)
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
    $('.menu-button').css({
      color: "#EFEFEF",
      backgroundColor: "#303030"
    }).animate({
      fontSize: '18px'
    }, 200)
  })
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .removeClass()
----------------
Similar to .addClass(), the jQuery .removeClass() method can remove a class from selected elements.

Its syntax is similar to .addClass():

$('.example-class').removeClass('active');

In the example above:

	. .removeClass() is called on .example-class elements.

	. The method removes the 'active' class from all .example-class elements.

* Instructions
--------------
Checkpoint 1 Passed
1.
Currently, the navigation menu is assigned a class called hide that sets its display to none.

Use the .removeClass() method to show the navigation menu when a userâ€™s mouse enters the menu buttonâ€™s area.


Hint
Inside of the mouseenter event handler and under the .addClass() code you wrote in the last exercise, use .removeClass() to remove the hide class on the '.nav-menu' element.

main.js
-------
$(document).ready(() => {
 
  $('.login-button').on('click', () => {
    $('.login-form').toggle();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
    $('.menu-button').addClass('button-active').animate({
      fontSize: '24px'
    }, 200)
    $('.nav-menu').removeClass('hide')
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
    $('.menu-button').css({
      color: "#EFEFEF",
      backgroundColor: "#303030"
    }).animate({
      fontSize: '18px'
    }, 200)
  })
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------


























































































































































